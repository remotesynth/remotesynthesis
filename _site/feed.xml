<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Remote Synthesis</title>
    <description>The blog of Brian Rinaldi, Developer Content Manager at Telerik</description>
    <link>http://remotesynthesis.com/</link>
    <atom:link href="http://remotesynthesis.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>The Web is Boring</title>
        <description>&lt;p&gt;When I was growing up, flying was fun. This wasn’t the kind of fun that a kid finds in simply new experiences - it was a legitimately enjoyable experience. The airport was a much less stressful place than it is today, with far less security and fewer lines. The planes seemed more spacious (though perhaps that part was really just that I was a kid). They served you food on most flights - with a real, metal fork and knife. Perhaps it wasn’t the greatest food, but wouldn’t we just love to get something, anything, nowadays? They’d even let kids go into the cabin and meet the crew, often handing them a junior crew member pin to wear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/posts/twa_pin.jpg&quot; alt=&quot;twa pin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I fly more nowadays than I did back then, but flying is generally painful. The airport is stressful. The airline customer service is generally awful. There are few, if any, meals or snacks served. Flying has become something I need - for work, to visit family, to get to somewhere for vacation - not something I enjoy. Even on vacation, flying is something we power through to get where we want to be rather than being part of the vacation experience.&lt;/p&gt;

&lt;h2 id=&quot;the-web-too-has-lost-its-luster&quot;&gt;The Web, Too, Has Lost Its Luster&lt;/h2&gt;

&lt;p&gt;Much like the joy of flying, I am finally ready to openly admit that the web is no longer fun. Just like flying, I use it more today than I ever did back when it was fun, but it is purely out of necessity rather than desire. On a personal level, I use web sites to get news and to keep up with friends and family. The web is, obviously, an integral part of my work too, for news and information as well as the focus of my actual job. All of these things I need, but none of them bring the joy and exitement that the web used to bring.&lt;/p&gt;

&lt;p&gt;Perhaps you are not old enough to remember when the web was fun. If so, you may even think that it &lt;em&gt;is&lt;/em&gt; fun. But back in the mid-to-late-90s, the web had the power to amaze us. New sites and new businesses would launch regularly and everyone had to try them out because each one seemed to bring something new and creative to the table. Sure, many didn’t survive long (and we had tons of useless accounts), but they all seemed to be part of an inexorable path towards something special - a future where the web would make our lives more enjoyable, easier and, yes, more fun. Many of us firmly believed that the web was the future of computing - who’d need a desktop or operating system when the web was eventually going to replace the need for either.&lt;/p&gt;

&lt;h2 id=&quot;that-didnt-happen&quot;&gt;That Didn’t Happen&lt;/h2&gt;

&lt;p&gt;Let’s be honest. None of that ever happened. You may be thinking, “But what about my streaming movies or my streaming music or my multiplayer games? Aren’t those fun?” To which I’d say, “Don’t confuse the internet with the web.” The internet enables each of these, but they are rarely done via the web (yes, they all have web interfaces, but I’d bet the majority of people do not access them this way).&lt;/p&gt;

&lt;p&gt;There’s been a lot of talk about how the &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2015/05/web_vs_native_l.html&quot;&gt;web is losing&lt;/a&gt; some unofficial battle for survival. Much of that has focused on the overwhelming amount of tools for web development and the way these tools are impacting the performance of the web. I am not disagreeing with those, per se, but I can say that the web was actually much more fun back when it was also horribly slow (most of us were on dial-up after all).&lt;/p&gt;

&lt;p&gt;I feel that the thing holding the web back is a lack of real, creative innovation. I read every day about new little features of the web platform, but I can’t remember the last time I read about something built on the web that really excited me. Until then, I’ll keep passionlessly reading my news and blog posts or getting my gmail and hating myself for checking Facebook for lack of something more interesting to do. Sorry, web, but you bore me.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jun 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/06/24/the-internet-is-boring/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/06/24/the-internet-is-boring/</guid>
      </item>
    
      <item>
        <title>Tips for Writing for a Tech Audience</title>
        <description>&lt;p&gt;I’ve been writing articles and blog posts about web development and technology for a long time. The original version of this blog started in 2004, but by that time I’d already written a couple articles for the ultra-prestigious ColdFusion Developer’s Journal (it’s ok to feel jealous).&lt;/p&gt;

&lt;p&gt;However, I’ve also been editing articles and blog posts about web development and technology for a while too. It started when I was at Adobe helping to run the Adobe Developer Connection a few years ago and continued when I launched my own site (Flippin’ Awesome which is now Modern Web and not run by me anymore). I still do this on an almost daily basis running the &lt;a href=&quot;developer.telerik.com&quot;&gt;Telerik Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this experience has taught me some things that I think help to make a really good (and potentially really popular) article or blog post for a developer or technology audience. In this post I’ll share my recommendations, though I should note that I’m not an expert at always following my own guidelines all the time.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;have-a-style&quot;&gt;Have a Style&lt;/h2&gt;

&lt;p&gt;It’s important to keep in mind that you aren’t writing API docs. API docs are generally dry, boring and simply stick to the facts. That’s their goal. However, an article or blog post should allow some of your personality to shine through. This helps to make the content both more relatable and more enjoyable to read.&lt;/p&gt;

&lt;p&gt;Keep in mind that your goal is both to educate and to entertain, to some degree. Some developers revert to a litany of code and explanation. It’s better to have a voice and have a story.&lt;/p&gt;

&lt;p&gt;Some things that can help:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain &lt;em&gt;why&lt;/em&gt; you are trying to do something, not just what you are trying to do and how you are doing it.&lt;/li&gt;
  &lt;li&gt;What made you get interested in doing this?&lt;/li&gt;
  &lt;li&gt;Did you have a struggles along the way? There’s no shame in admitting that you found something difficult - your readers will likely relate to the experience.&lt;/li&gt;
  &lt;li&gt;Have fun with the demo! Perhaps pick something you are interested in that isn’t technical. For example. I often choose to use some cartoons I enjoy as subject matter for my demos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;know-your-audience&quot;&gt;Know Your Audience&lt;/h2&gt;

&lt;p&gt;While you should have a voice and a style, it’s important to know when it’s ok to be more or less casual in your voice. If I am writing something for my blog, I am often much more casual than if I am writing for the Telerik Developer Network or Sitepoint.&lt;/p&gt;

&lt;p&gt;If I am writing for my blog, proper grammar, punctuation and spelling are less important. If I am writing for a professional site, these become the difference between seeming like an amateur and not. You’d be surprised how people are affected by these things, even if they do not recognize it themselves. Some sites have editors who help with this, but others don’t - so don’t rely on them to correct your mistakes.&lt;/p&gt;

&lt;p&gt;Try to always have a friend you trust read through the article first - this isn’t critical for a personal blog post but even those can benefit. Even the best writers need a second opinion and there is nothing than can make your content better than a good, critical opinion.&lt;/p&gt;

&lt;h2 id=&quot;stay-on-track&quot;&gt;Stay on Track&lt;/h2&gt;

&lt;p&gt;So many developers tend to think that every little detail is pertinent. So, they get sidetracked. Instead of traveling straight down a path, they don’t just point out the detours, but take you down them.&lt;/p&gt;

&lt;p&gt;As a rule, if the information doesn’t apply to &lt;em&gt;most&lt;/em&gt; situations, don’t spend time on it. These are the kind of scenarios like, if you are running an old version of X operating system and want to perform special action Y, you’ll need to do this a different way - let’s walk through it. Another example is getting lost in caveats, detailing every minor exception that in all likelihood doesn’t apply to the reader.&lt;/p&gt;

&lt;p&gt;The best strategy in these cases is to simply point to the “detour” as an aside and link to the best resource to follow. Or note that there are exceptions but don’t go detailed into the full list of caveats.&lt;/p&gt;

&lt;p&gt;You may feel as though you are being somehow incomplete in your coverage, but you are less likely to lose the 90% of the readers to whom the straightforward path applies by not catering your post to the 10%.&lt;/p&gt;

&lt;h2 id=&quot;avoid-the-wall-of-text&quot;&gt;Avoid the Wall of Text&lt;/h2&gt;

&lt;p&gt;There is nothing harder to read than a post that has no headers and is filled with overly long paragraphs. Adding section headers and even subheaders for long sections not only makes your article easier to read, but also makes it easier to scan - which can help the reader determine it’s value to them.&lt;/p&gt;

&lt;p&gt;Shorter paragraphs also make your content more readable and scannable. Plus, a wall of unbroken text can seem intimidating to a reader. Break up large paragraphs and, whenever possible, place key ideas into lists, which I’ve found can help drive home key points and improve retention.&lt;/p&gt;

&lt;h2 id=&quot;what-are-your-ideas&quot;&gt;What Are Your Ideas?&lt;/h2&gt;

&lt;p&gt;Hopefully you’ve found these ideas helpful. Do you have any strategies you use to improve your writing? Please share.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 May 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/05/18/writing-for-tech-audience/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/05/18/writing-for-tech-audience/</guid>
      </item>
    
      <item>
        <title>Why are Web Developers Hostile to Audio?</title>
        <description>&lt;p&gt;I like to talk and write about Web Audio. It can be a fun topic. However, most talks and demos fail to touch on anything useful. Sure, we can build drum machines and sequencers to our heart’s content, but how does this apply to 90% of the web? It doesn’t. Thus, when I speak or write about web audio it seems to draw a niche audience.&lt;/p&gt;

&lt;p&gt;However, recently I have been on a mission to talk and write about how web developers can use &lt;a href=&quot;http://developer.telerik.com/featured/practical-web-audio/&quot;&gt;web audio to enhance their applications in practical and useful ways&lt;/a&gt;. The frequent response I get is like the one below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webaudio_comment.jpg&quot; alt=&quot;I hate audio on the web&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You gotta love social media because not only did this person make it clear he never bothered to read the article, but 5 people (which on Google Plus is like everyone) gave it a plus one. However, leaving aside those issues, why are web developers so outright hostile and dismissive to even the suggestion of using audio on the web that they aren’t even willing to discuss it or hear arguments as to how it could be useful?&lt;/p&gt;

&lt;p&gt;Let’s recap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Audio in game UI equals totally expected;&lt;/li&gt;
  &lt;li&gt;Audio in mobile app UI equals acceptable;&lt;/li&gt;
  &lt;li&gt;Audio in desktop app UI equals legitimate, within reason;&lt;/li&gt;
  &lt;li&gt;Audio in web apps equals ARE YOU INSANE?!?!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a theory as to why.&lt;/p&gt;

&lt;h3 id=&quot;the-legacy-of-years-of-misuse&quot;&gt;The Legacy of Years of Misuse&lt;/h3&gt;

&lt;p&gt;I expressed this In the early days of the web, we didn’t have the web audio API. What we had was site’s that got clever and used MIDI or, even worse, had some obnoxious “Hamster Dance” like audio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hampster_dance.gif&quot; alt=&quot;Hamster Dance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then came years of Flash Intros and more useless audio. It became ingrained in web developers’ heads that audio on the web was purely a gimmick. It is such a widely accepted “faux pas” to include audio, that even the mention of carefully considering audio brings strong reactions.&lt;/p&gt;

&lt;h3 id=&quot;its-time-to-let-it-go&quot;&gt;It’s Time to Let It Go&lt;/h3&gt;

&lt;p&gt;But do we have to be held back today by the misdeeds of years ago? Sure, the web audio API can be misused. Sure, so far, we’ve mostly shown how it can be used for things like &lt;a href=&quot;http://modernweb.com/2013/09/09/retro-game-music-using-web-audio-and-band-js/&quot;&gt;8 bit video game music&lt;/a&gt; (guilty as charged) and web-based drum machines. (Not that those things are useful, even purely as excercises in having some fun with your programming skills, they are beneficial.) The point is, though, this doesn’t negate there being useful and practical ways to integrate audio into your web application. If it’s ok for every other type of application, why not the web?&lt;/p&gt;

&lt;p&gt;Unlike the commenter above, perhaps you’ll give my &lt;a href=&quot;http://developer.telerik.com/featured/practical-web-audio/&quot;&gt;full article a read&lt;/a&gt;. I’d love to hear your thoughts on the topic.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 May 2015 07:15:47 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/05/14/web-developers-hostile-to-audio/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/05/14/web-developers-hostile-to-audio/</guid>
      </item>
    
      <item>
        <title>Jekyll Versus the Competition</title>
        <description>&lt;p&gt;On Saturday, May 2, the first ever &lt;a href=&quot;http://jekyllconf.com&quot;&gt;JekyllConf&lt;/a&gt; was held online and featured some really prominent speakers including Tom Preston-Werner and Brandon Mathis. I had the honor of opening the event with my session comparing Jekyll to other popular static site engine options including &lt;a href=&quot;http://harpjs.com&quot;&gt;Harp&lt;/a&gt;, &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt;, &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt;, &lt;a href=&quot;http://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; and &lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary (and in my personal opinion of course), Jekyll is still in the strongest position of all the engines. It has the strongest community (partly evidenced by JekyllConf itself), the best documentation (not saying it couldn’t be better, but it’s better than the alternatives) and has the largest selection of pre-built templates and plugins.&lt;/p&gt;

&lt;p&gt;However, it has failed to reach much beyond hardcore developers. This is partly because of the nature of the tool - for instance, few people outside of the developer community enjoy working on the command line…in fact, most find it intimidating. Tooling for authors is weak too - Markdown is a terrible option for authors (who aren’t developers). We think of it as being so simple and easy, but that’s actually what makes it so complex. In terms of authoring, it covers a majority of use cases, but it is still very common to encounter requirements that it doesn’t meet (intentionally, since it’s goal was simplicity). Thus, when you teach an author Markdown, you need to teach them the syntax, what it doesn’t cover and  HTML to handle those scenarios it doesn’t cover. This is actually more complicated than simply teaching them HTML.&lt;/p&gt;

&lt;p&gt;In my opinion, until the tooling is available to allow authors and contributors to write using the tooling they love, static site engines will remain a niche solution. This is a shame as they actually seem like the optimal solution for content focused sites and, perhaps more so, documentation sites. The good news is that there are people working on the tools needed to bridge this gap…we’ll see how this goes!&lt;/p&gt;

&lt;p&gt;You can see the full session recording below or view the &lt;a href=&quot;https://www.youtube.com/watch?v=X5sJIL-nOhg&amp;amp;feature=youtu.be&amp;amp;t=9m32s&quot;&gt;full recording of the day here&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vT7DhK5zbv0?list=PLrxYIq_0LFJcXlsRZD-JCdITfZexwvqsQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Thu, 07 May 2015 07:15:47 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/05/07/jekyll-versus-competition/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/05/07/jekyll-versus-competition/</guid>
      </item>
    
      <item>
        <title>Tools for Writing and Converting Markdown</title>
        <description>&lt;p&gt;By now, most developers are familiar on some level with &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;. It’s become a somewhat ubiquitous part of developer tooling, probably in no small part due to it’s usage for documentation in GitHub. It also plays a big part in nearly all the major static site engines.&lt;/p&gt;

&lt;p&gt;The power of Markdown and probably a significant reason for its success is in its simplicity. But this is also its biggest weakness. Developers love Markdown because it offers a shorthand for probably 80% of their writing use cases - things like blog posts and basic documentation. For the other 20%, developers have no problem switching to straight HTML, which, of course, you can include in a Markdown file without issue.&lt;/p&gt;

&lt;p&gt;For writers and the general public however, this presents a huge obstacle. They cannot use the tools they are comfortable in writing with and they not only are forced to learn Markdown syntax, but they must learn those cases that Markdown doesn’t cover and the HTML to use in these cases. It’s multiple layers of complexity for the sake of simplicity.&lt;/p&gt;

&lt;p&gt;That being said, as Markdown becomes more widespread in its use, the tooling around it is slowly improving. I use Markdown daily and below are some of the tools that I’ve found useful in my own experience.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;desktop-editors&quot;&gt;Desktop Editors&lt;/h2&gt;

&lt;p&gt;Most code editors such as &lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt; or &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; already include some level of Markdown support. However, if you’re looking for an editor with richer functionality geared specifically towards Markdown, then there are a number of options.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://25.io/mou/&quot;&gt;Mou&lt;/a&gt; is my current go to option for writing Markdown. As with pretty much every Markdown editor out there, you write in Markdown and have a live preview available. There is currently no option that I am aware of where you write in rich text and have it converted to Markdown.&lt;/p&gt;

&lt;p&gt;Mou offers syntax hinting and highlights as well as keyboard shortcuts, but my favorite feature (and why I prefer it) is the export. I rely heavily on the export to HTML feature and, in my experience, it has the most reliable of the editors I have tried. The only quirk I find is that it often stumbles when using backticks for code blocks (and doesn’t recognize the GitHub-flavored Markdown syntax for indicating the type of code within a code block).&lt;/p&gt;

&lt;p&gt;Currently Mou is still free, though a 1.0 looks to be forthcoming that will be paid.&lt;/p&gt;

&lt;p&gt;Another free option is &lt;a href=&quot;http://macdown.uranusjr.com/&quot;&gt;Macdown&lt;/a&gt;, which was created when Mou appeared to be ceasing development. I found it to be quite buggy, personally, but have not tried it much since its initial release.&lt;/p&gt;

&lt;p&gt;If you are on Windows, some options I’ve heard recommended include &lt;a href=&quot;http://www.texts.io/&quot;&gt;Texts&lt;/a&gt; and &lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad&lt;/a&gt;, though I have limited experience with either.&lt;/p&gt;

&lt;p&gt;Lastly, while not technically an editor, &lt;a href=&quot;https://github.com/mobily/markdown-live&quot;&gt;Markdown Live&lt;/a&gt; is a useful tool for live-previewing Markdown as you write it. Once installed, you simply change directory into the folder you want to serve up and enter &lt;code&gt;mdlive&lt;/code&gt; and it will open a preview in the browser that will update as you type - without the need to save the file. This can be useful if you prefer to use a plain text editor for writing Markdown.&lt;/p&gt;

&lt;h2 id=&quot;web-based-editors&quot;&gt;Web-based Editors&lt;/h2&gt;

&lt;p&gt;If you are looking for a free web-based option, &lt;a href=&quot;http://dillinger.io/&quot;&gt;Dillinger&lt;/a&gt; is a free (and open source) Markdown editor for the browser. It includes a live preview as well as the ability to import documents from numerous sources and export them to various formats.&lt;/p&gt;

&lt;p&gt;However, one of the things lacking in both desktop and web-based editors is collaboration. If you are working on a team, the ability to share, comment and collaborate on a document is not just useful, but necessary. &lt;a href=&quot;https://beegit.com/&quot;&gt;Beegit&lt;/a&gt; is a commercial offering that includes a number of collaboration features. My team uses it mostly for the ability to share and comment on documents as they are being developed, much as you would within Google Drive.&lt;/p&gt;

&lt;h2 id=&quot;converters&quot;&gt;Converters&lt;/h2&gt;

&lt;p&gt;When you are working with a number of contributors, it’s not always possible to force everyone to use Markdown. While Markdown’s simplicity makes it simple to manually convert short documents, converting long documents or groups of documents could get tedious and time consuming. While they aren’t perfect, in these cases, a converter can be enormously helpful.&lt;/p&gt;

&lt;p&gt;One converter that I rely on frequently is the &lt;a href=&quot;http://word-to-markdown.herokuapp.com/&quot;&gt;Word to Markdown web app&lt;/a&gt;. Simply choose your local file and hit convert. The site will post you the Markdown it generates from the file as well as a live preview. For good or for bad, it even embeds images in the document using Base64 encoding. Personally, I find this can be difficult to clean up and replace with external images, so I often remove them from the source document first and put placeholders.&lt;/p&gt;

&lt;p&gt;Word to Markdown is also available as an &lt;a href=&quot;https://github.com/benbalter/word-to-markdown&quot;&gt;open source project and command line tool&lt;/a&gt;. In my experience, I couldn’t get the command line tool to work properly for some reason, while the web app worked perfectly.&lt;/p&gt;

&lt;p&gt;In other cases, you may encounter rich text that you need converted to Markdown, such as text copy/pasted from the web or some other editor. In these situations, I’ve found &lt;a href=&quot;http://markitdown.medusis.com/&quot;&gt;Mark It Down&lt;/a&gt; to be both reliable and helpful (it is also &lt;a href=&quot;https://github.com/bambax/markitdown.medusis.com&quot;&gt;open source&lt;/a&gt;). Simply paste in the rich text and hit the convert button to get back nice, clean Markdown.&lt;/p&gt;

&lt;h2 id=&quot;other-tools&quot;&gt;Other Tools?&lt;/h2&gt;

&lt;p&gt;This is by no means a comprehensive list of Markdown tools - just the ones that I’ve personally come to rely on at some level or another. Are there any others that you recommend? Be sure to share in the comments as I’m always looking for new ones.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Apr 2015 07:15:47 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/04/29/tools-for-writing-markdown/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/04/29/tools-for-writing-markdown/</guid>
      </item>
    
      <item>
        <title>Building Static Sites with Node.js and Wintersmith</title>
        <description>&lt;p&gt;When I’ve spoken on the topic or even when I posted my recent &lt;a href=&quot;http://developer.telerik.com/featured/getting-started-with-jekyll/&quot;&gt;guide to getting started with Jekyll&lt;/a&gt;,  the question I always get is if there is a comparable static site generator to Jekyll that is built with JavaScript and available on npm. The reason people cite is that they aren’t comfortable with Ruby and thus have trouble when they encounter problems with Jekyll or are unable to customize it completely to their needs. Well, there’s good and bad news.&lt;/p&gt;

&lt;p&gt;First, the bad news… I have found nothing comparable to Jekyll in terms of overall features, documentation and community. Now I don’t know every engine out there, but, so far, there’s nothing that even comes close to fully matching Jekyll.&lt;/p&gt;

&lt;p&gt;The good news, however, is that I found &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt; to be a viable Jekyll replacement. It has a lot of the key features and is extensible. Plus, there are a reasonable amount of extensions out there for it already. On the other hand, the documentation is awful (let’s be honest) and the community is small. So, if you run into a problem, you’re stuck reviewing the source code. On the upside, I found the source code is pretty self-explanatory when I needed to rely on it.&lt;/p&gt;

&lt;p&gt;Given the lack of a good getting started guide in the Wintersmith documentation, I wrote a two-part series for Sitepoint that walks you through the entire process of building a site. It follows the same exact format of my &lt;a href=&quot;http://developer.telerik.com/featured/getting-started-with-jekyll/&quot;&gt;Jekyll guide&lt;/a&gt; covering everything from installation to templating, creating posts, custom metadata and custom data.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/getting-started-wintersmith-nodejs-static-site-generator/&quot;&gt;Getting Started with Wintersmith: A Node.js-based Static Site Generator&lt;/a&gt; - Part 1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/creating-posts-custom-metadata-data-wintersmith/&quot;&gt;Creating Posts, Custom Metadata, and Data in Wintersmith&lt;/a&gt; - Part 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for the example is part of my &lt;a href=&quot;https://github.com/remotesynth/Static-Site-Samples&quot;&gt;Static Site Samples GitHub project&lt;/a&gt; which also includes the aforementioned Jekyll sample as well as examples for Harp and Middleman.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/04/08/building-static-sites-wintersmith/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/04/08/building-static-sites-wintersmith/</guid>
      </item>
    
      <item>
        <title>A Guide to Building Static Sites with Jekyll</title>
        <description>&lt;p&gt;As I’ve &lt;a href=&quot;http://remotesynthesis.com/general/2015/03/04/comparing-static-site-engines/&quot;&gt;posted about recently&lt;/a&gt;, I’ve been speaking a lot about comparing static site engines. There are a &lt;em&gt;ton&lt;/em&gt; of options out there (389 as of today, according to &lt;a href=&quot;https://staticsitegenerators.net/&quot;&gt;this site&lt;/a&gt;). However, based on my personal experience, I always recommend &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; - granted, that’s based on having used 5 of the 389 so far.&lt;/p&gt;

&lt;p&gt;I already have a &lt;a href=&quot;https://github.com/remotesynth/Static-Site-Samples&quot;&gt;GitHub project&lt;/a&gt; where I have built the same project multiple times with different engines as a means of comparison. The readme will guide you with installing and running each of these should you choose.&lt;/p&gt;

&lt;p&gt;Now, if you wanted to learn how to use Jekyll using this sample, I have written a &lt;a href=&quot;http://developer.telerik.com/featured/getting-started-with-jekyll/&quot;&gt;detailed guide to getting started with Jekyll&lt;/a&gt; for the Telerik Developer Network. It walks through the most common things you need to know about Liquid templating as well as how to create and build your Jekyll site.&lt;/p&gt;

&lt;p&gt;I hope you enjoy it!&lt;/p&gt;

&lt;p&gt;P.S. One common questions I get whenever I recommend Jekyll is from people who don’t know Ruby and would prefer a solution written in JavaScript/Node.js and, preferably, available via npm. The &lt;a href=&quot;https://github.com/remotesynth/Static-Site-Samples&quot;&gt;GitHub project&lt;/a&gt; includes two, Harp and Wintersmith. I have a follow up article that should be published any day now that walks through the same steps laid out in the Jekyll tutorial, but for Wintersmith. I’ll post about that as soon as it is out.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/03/24/building-static-sites-jekyll/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/03/24/building-static-sites-jekyll/</guid>
      </item>
    
      <item>
        <title>Can Web Audio be Useful?</title>
        <description>&lt;p&gt;Next month, I will be presenting at the &lt;a href=&quot;http://fluentconf.com&quot;&gt;Fluent Conference&lt;/a&gt; in San Francisco on the topic of “Practical Web Audio.” The idea here is that most every demo or presentation about web audio (including my own) have been fun and cool but not practical unless you build games or music software.&lt;/p&gt;

&lt;p&gt;So, are there useful purposes for web audio in a standard web app? I wrote an article called &lt;a href=&quot;http://developer.telerik.com/featured/adding-audio-to-web-apps/&quot;&gt;Adding Audio to Web Apps&lt;/a&gt; that begins to explore some ideas. In almost every case, the demo uses very brief portions of audio to try to add context to some form of input. Notifications seemed obvious - but, admittedly, others are harder to make a strong case for except in very specific circumstances. These were just some of my initial ideas - I have a few others and some variations to the ones I showed already that I am working on.&lt;/p&gt;

&lt;p&gt;Have you used web audio in your web app for something useful? If so, please share (and maybe I can even show it at Fluent).&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Mar 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/03/14/can-web-audio-be-useful/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/03/14/can-web-audio-be-useful/</guid>
      </item>
    
      <item>
        <title>Comparing Static Site Engines</title>
        <description>&lt;p&gt;On February 18, I had the pleasure of gaving a &lt;a href=&quot;http://www.meetup.com/sfhtml5/events/219180801/&quot;&gt;talk&lt;/a&gt; to the San Francisco HTML5 User Group. The topic was static site engines, covering the basics of what they are and what they are good for (or what they are not good for). The latter half of the session focused on comparing three popular static site engines: &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt; and &lt;a href=&quot;http://harpjs.com/&quot;&gt;Harp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can view the presentation below (I am also giving an updated version of this presentation at &lt;a href=&quot;https://www.devnexus.com/s/index&quot;&gt;DevNexus&lt;/a&gt; in Atlanta later this month).&lt;/p&gt;

&lt;h2 id=&quot;sample-application&quot;&gt;Sample Application&lt;/h2&gt;

&lt;p&gt;In order to compare the engines, I created a simple sample site, using data from the &lt;a href=&quot;http://adventuretime.wikia.com/wiki/Adventure_Time_with_Finn_and_Jake_Wiki&quot;&gt;Adventure Time Wiki&lt;/a&gt;. The site is intentionally simple, but uses things like custom post attributes, custom global attributes, data and, of course, posts.&lt;/p&gt;

&lt;p&gt;You can get the samples as well as the slide deck &lt;a href=&quot;https://github.com/remotesynth/Static-Site-Samples&quot;&gt;on GitHub&lt;/a&gt;. I am hoping to add additional samples in the coming weeks.&lt;/p&gt;

&lt;h2 id=&quot;recording&quot;&gt;Recording&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/R-fJWOO1bjE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Wed, 04 Mar 2015 04:00:00 -0500</pubDate>
        <link>http://remotesynthesis.com/general/2015/03/04/comparing-static-site-engines/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/03/04/comparing-static-site-engines/</guid>
      </item>
    
      <item>
        <title>Patterns of Development</title>
        <description>&lt;p&gt;Patterns are something that you cannot view close up - a narrow view obscures the pattern. However, given distance and time, we can begin to make out the sequences that repeat. This is one of the few benefits of being old, which I am compared to many developers.&lt;/p&gt;

&lt;p&gt;In this post, I am not talking about development patterns as in software design patterns (or anti-patterns), but rather patterns in attitudes and behavior among developers that change the way a large number of us approach our work.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;front-to-back-to-front-to&quot;&gt;Front to Back to Front to…&lt;/h2&gt;

&lt;p&gt;I want to discuss a pattern I have noticed throughout my career and has only become more obvious over time. This pattern is the constant shifting in focus from front-end heavy applications to back-end heavy applications. I’m bringing the topic up becuase I believe we’re seeing a shift again, which becomes clear in recent &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2015/01/the_problem_wit.html&quot;&gt;controversies over AngularJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically the pattern is that every 5 to 10 years (or so), developers seem to shift in attitude and opinion on where to place much of the burden of the application - moving from placing much of the application and business logic on the front-end, to placing it on the back-end. I think a little history might make this pattern seem clear (though you can feel free to disagree with me).&lt;/p&gt;

&lt;h2 id=&quot;back-in-my-day&quot;&gt;Back in My Day…&lt;/h2&gt;

&lt;p&gt;As an old person, let me give a very oversimplified history.&lt;/p&gt;

&lt;p&gt;So, I’m not that old - really I am not. But even when I went to college it was still fairly common for many applications, especially in the enterprise, to simply be a lightweight terminal-type interface to a mainframe that had the power to run the actual application logic. In this case, obviously, the “front-end” application was little more than a text entry interface for entering commands into and receiving data back from the mainframe (which was effectively the server in this case).&lt;/p&gt;

&lt;h3 id=&quot;rich-client-server-desktops-applications&quot;&gt;Rich Client Server Desktops Applications&lt;/h3&gt;

&lt;p&gt;As PC’s became more powerful, development tools (PowerBuilder was a popular one) helped developers create more complex and interactive native applications for the desktop. While the back-end might retain a good chunk of logic, the interface itself contained a lot of interactivity and the flow of the application was based upon certain business rules. Basically, many aspects that previously had to be kept on the back-end could now be pushed to the front.&lt;/p&gt;

&lt;h3 id=&quot;early-web-applications&quot;&gt;Early Web Applications&lt;/h3&gt;

&lt;p&gt;The rise of the web changed this. Why? Well, the early web was slow and limiting in many ways. It was powerful in the sense that I no longer needed to deploy applications across multiple desktops, make sure they were updated and so on. It allowed us to interact with our applications from anywhere. However, the capabilities of the browser meant that our applications were closer to the dumb terminals of earlier days than the rich applications on the desktop. Sure, they may have looked pretty with forms and tables and blinking text, but they were mostly dumb - the application logic residing almost entirely on the server.&lt;/p&gt;

&lt;h3 id=&quot;flash-flex-silverlight&quot;&gt;Flash, Flex, Silverlight…&lt;/h3&gt;

&lt;p&gt;This didn’t change because browsers improved - at least not initially. Plugins like Flash built upon the initial attempts (like Java Applets) to give browsers the ability to create rich, desktop-like experiences on the web. Soon Flex and Silverlight were hot and much of the application and even business logic was moving back onto the client. Sure, we had to build portions of our business logic and validation twice, but the experience for the user was much improved. We called these Rich Internet Applications in part to recognize them as an attempt to recreate the interactivity of desktop applications but served in the browser.&lt;/p&gt;

&lt;h3 id=&quot;html5&quot;&gt;HTML5&lt;/h3&gt;

&lt;p&gt;This focus on the front-end didn’t change with the death of Flash and the growth of HTML5. Actually, if anything, it increased. The primary difference was that now we were writing complex, desktop-like applications in JavaScript rather than ActionScript. In fact, many back-ends became so lightweight that, in many cases, applications would connect directly to data on the cloud or in NoSQL databases.&lt;/p&gt;

&lt;h2 id=&quot;a-shift-imo&quot;&gt;A Shift (imo)&lt;/h2&gt;

&lt;p&gt;I actually wondered if we might be hitting a point where this pattern would break, but a couple of things changed as I see it.&lt;/p&gt;

&lt;p&gt;First, there’s the rise of JavaScript on the back-end using things like Node.js (or io.js if you now prefer). This isn’t because JavaScript is so awesome, but because it allowed us to write business logic and validation and such in one language and it could run on both ends - meaning, for example, I don’t have to write data validation in JavaScript on the front-end and Java (or PHP or whatever) on the back. Also, these servers are fast and built for running the types of web applications people seem to be building today.&lt;/p&gt;

&lt;p&gt;However, that isn’t the big reason. The major shift is because of mobile (of course!). As you may have seen in some of the recent AngularJS debates (among other related topics), placing too much burden for processing and logic on the front-end can make an application run poorly on mobile. And nevermind writing things like writing validation rules twice, we certainly don’t want to have to write our applications once for the desktop and then for each mobile platform. Thus, we need to move some of the code that we’d perhaps become accustomed to placing on the client back onto our back-end server…and so goes the cycle.&lt;/p&gt;

&lt;p&gt;Now, perhaps this trend will cease. Mobile devices are rapidly becoming very powerful computers in their own right. Or perhaps I am old and my mind is causing me to see patterns that don’t exist. But given the back and forth on this that I have witnessed over my career, I suspect we may be in the midst of yet another shift.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Jan 2015 04:00:00 -0500</pubDate>
        <link>http://remotesynthesis.com/general/2015/01/21/patterns-of-development/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/01/21/patterns-of-development/</guid>
      </item>
    
  </channel>
</rss>
