<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Remote Synthesis</title>
    <description>The blog of Brian Rinaldi, Developer Content Manager at Telerik</description>
    <link>http://remotesynthesis.com/</link>
    <atom:link href="http://remotesynthesis.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Some Advanced Jekyll/Liquid Template Techniques</title>
        <description>&lt;p&gt;Generally speaking, Liquid templates for Jekyll are pretty easy to create - Liquid is a powerful templating tool and offers a large number of helpers and formatters to get complex tasks done. However, recently I had the opportunity to build a site that required me to use some techniques I’d never needed before with Liquid and Jekyll.&lt;/p&gt;

&lt;p&gt;The home page had a number of repeating sections that listed the content for each category of content. If there was no content, the section shouldn’t show. More importantly, each section was essentially the same except for some category metadata and styling. Rather than repeat the same code for each section, I decided to use includes - but this required some creative workarounds to make the styling show.&lt;/p&gt;

&lt;p&gt;In this post, I’ll show some of the techniques I used. I am not entirely certain that these are necessarily “best practices,” but since there wasn’t a lot of information I could find around the web on this, I thought it might be worth sharing. (And if you have better ways of solving these problems, please share.)&lt;/p&gt;

&lt;h2 id=&quot;determining-if-a-category-has-posts-and-how-many&quot;&gt;Determining If a Category Has Posts (and How Many)&lt;/h2&gt;

&lt;p&gt;This one is actually pretty straightforward. Each category has a size property which you can use.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;categoryname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
 &amp;lt;!-- do something --&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously, replace &lt;code&gt;categoryname&lt;/code&gt; with the actual category you used for your posts. Don’t worry, it won’t error if the category doesn’t exist. Now, I suppose you could leave the &lt;code&gt;.size&lt;/code&gt; off assuming that if the category doesn’t exist, that is because it contains no posts, but this works just as well (and reads easier perhaps).&lt;/p&gt;

&lt;h2 id=&quot;assign-the-value-of-a-variable&quot;&gt;Assign the Value of a Variable&lt;/h2&gt;

&lt;p&gt;In this scenario, I had a variable that would have the current category. Assigning a variable is easy. Liquid has an &lt;code&gt;assign&lt;/code&gt; keyword for this purpose.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;categoryname&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;foobar&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some examples claimed that you could not reassign the value of a variable once initially assigned. I didn’t find this to be the case. However, you can, alternatively, assign a variable with &lt;code&gt;capture&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;categoryname&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;foobar&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endcapture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-a-variable-with-an-include&quot;&gt;Using a Variable with an Include&lt;/h2&gt;

&lt;p&gt;There’s really nothing special to do here. If the variable is assigned, you can simply use it within any include thereafter. (Note: I tried using the &lt;code&gt;with&lt;/code&gt; keyword to pass the variable in the include rather than assigning it each time, but couldn’t get this to work properly.)&lt;/p&gt;

&lt;p&gt;The fun part here is that the include was always the same, just the value of the variable changed. Let’s look at a small portion.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;categoryname&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;section&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;index_article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;/section&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;barbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;categoryname&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;barbar&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;section&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;index_article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;/section&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Within that include (which I poorly named &lt;code&gt;index_article.html&lt;/code&gt;), I can loop over the posts within that category by using the variable.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% include banner.html %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ArticleList&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% for post in site.categories[categoryname] %}
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ post.url | prepend: site.baseurl }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ post.description }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Author&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.author }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PublishDate&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.date | date: &quot;%b %-d, %Y&quot; }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;dynamically-load-data&quot;&gt;Dynamically Load Data&lt;/h2&gt;

&lt;p&gt;So, remember I said that the banner changed based upon some category metadata? Well, in order to do that, I decided to place the necessary metadata items in a YAML data file under &lt;code&gt;_data&lt;/code&gt;. Each category had the same key name as the actual post category so that I could easily look it up. (Yes, this is probably a little brittle, but remember we are talking a static site - it’s not like I’m going to push something broken live.)&lt;/p&gt;

&lt;p&gt;Let’s look at a sample of the YAML.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bar&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;best&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;around&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;logo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;foobar.png&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Purple&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;barbar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bar&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;There&#39;s&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;doubt&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bar&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Orange&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that they don’t all contain the exact same metadata - the first has a logo but the second doesn’t. In the &lt;code&gt;index_article.html&lt;/code&gt; code sample above I included &lt;code&gt;banner.html&lt;/code&gt;. Let’s take a look at that.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SectionHead {{ site.data.categories[categoryname].color }}Box }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LogoSpot&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  {% if site.data.categories[categoryname].logo %}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}/images/{{ site.data.categories[categoryname].logo }}&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.data.categories[categoryname].name }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  {% elsif site.data.categories[categoryname].subtitle %}
    {{ site.data.categories[categoryname].subtitle }}
  {% else %}
    {{ site.data.categories[categoryname].name }}
  {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ site.data.categories[categoryname].name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;{{ site.data.categories[categoryname].description }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that I am able to dynamically pull the category name via the variable (and even though this is an include within an include after the variable was set). Also notice that I can test if particular properties exist on the category - for example I show the logo if it exists, if not the subtitle (if it exists) and else just the category name.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully these examples are useful - I know they would have helped me. If anyone has suggestions on how I could have achieved the same results in a better fashion, please share.&lt;/p&gt;

&lt;p&gt;Also, be sure to check out my free ebook from O’Reilly - &lt;a href=&quot;http://www.oreilly.com/web-platform/free/static-site-generators.csp&quot;&gt;Static Site Generators - Modern Tools for Static Website Development&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Oct 2015 00:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/10/02/advanced-jekyll-templates/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/10/02/advanced-jekyll-templates/</guid>
      </item>
    
      <item>
        <title>Get Started with Static Site Generators</title>
        <description>&lt;p&gt;In the early days of the web, there was no such category as “static sites” - the web was made up of static resources. This was a maintainable solution when the web was simple. That didn’t last long.&lt;/p&gt;

&lt;p&gt;Static sites had enormous limitations that made them an impractical solution for most web sites - even the relatively simple ones.&lt;/p&gt;

&lt;p&gt;More recently, however, a combination of asynchronous content, third-party services and new tools, called static site generators, have made the old skool static site both feasible and cool again. Tools like &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; are used to run thousands of sites across the web (including this one…though it admittedly deserves more love).&lt;/p&gt;

&lt;p&gt;But what are static site genertors? Which one of the 400 or so of them should you consider using? What types of sites are they most suitable for?&lt;/p&gt;

&lt;p&gt;These are some of the questions I aim to answer in a &lt;a href=&quot;http://www.oreilly.com/web-platform/free/static-site-generators.csp&quot;&gt;&lt;em&gt;free&lt;/em&gt; report on static site generators for O’Reilly Media&lt;/a&gt;. I know what you are thinking - “Awesome, just in time for the weekend!” You’re right! Did I mention it is free? Also, I should note that it is free.&lt;/p&gt;

&lt;p&gt;Hopefully this report will answer any questions you may have about static site generators and help you get started in choosing one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oreilly.com/web-platform/free/static-site-generators.csp&quot;&gt;&lt;img src=&quot;http://covers.oreillystatic.com/images/0636920040095/cat.gif&quot; alt=&quot;Static Site Generators - Modern Tools for Static Website Development&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oreilly.com/web-platform/free/static-site-generators.csp&quot;&gt;Static Site Generators - Modern Tools for Static Website Development&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/09/25/get-started-with-static-site-generators/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/09/25/get-started-with-static-site-generators/</guid>
      </item>
    
      <item>
        <title>Which Free Code Editor Is Right For You?</title>
        <description>&lt;p&gt;We live in a day and age as web developers where our biggest complaint seems to be a overabundance of free tools. In the case of code editors, there are a few prominent free ones: &lt;a href=&quot;http://atom.io&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt; and, most recently, &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. Each editor has its own set of strengths and weaknesses. Each is backed by a large corporation - GitHub for Atom, Adobe for Brackets and Microsoft for Visual Studio Code - so obviously they will be geared towards the target audience of each respective company.&lt;/p&gt;

&lt;p&gt;Nonetheless, they are all good editors. So which one should you choose?&lt;/p&gt;

&lt;p&gt;Well, &lt;a href=&quot;http://developer.telerik.com/featured/battle-of-the-free-code-editors/&quot;&gt;it depends&lt;/a&gt;. You knew I was going to say that!&lt;/p&gt;

&lt;p&gt;In my latest article, &lt;a href=&quot;http://developer.telerik.com/featured/battle-of-the-free-code-editors/&quot;&gt;Battle of the Free Code Editors&lt;/a&gt;, I go into the distinguishing features of each editor and what type of developer it is best suited for.&lt;/p&gt;

&lt;p&gt;Please, &lt;a href=&quot;http://developer.telerik.com/featured/battle-of-the-free-code-editors/&quot;&gt;check out the article&lt;/a&gt; and feel free to share your thoughts.&lt;/p&gt;

&lt;h3 id=&quot;a-note-on-sublime&quot;&gt;A Note on Sublime&lt;/h3&gt;

&lt;p&gt;I was asked numerous times after writing this article, why did I not include &lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt;? After all, Sublime is, for all intents and purposes, the market leader for lightweight code editors. The article compared &lt;em&gt;free&lt;/em&gt; editors. However, &lt;em&gt;Sublime is not free!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, you can try it for free and, as many responses noted, use it forever without paying if you are willing to live with dismissing the prompt to buy regularly. One person even noted to me that if the author didn’t want people to use it for free forever, they’d have a different license method.&lt;/p&gt;

&lt;p&gt;I’m sorry, that’s not how this works. The author clearly states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sublime Text may be downloaded and evaluated for free, however a license must be purchased for continued use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I said on Twitter…&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;It surprises me how many people seem to advocate using Sublime for free. If you think the software is great, why not pay what they ask?&lt;/p&gt;&amp;mdash; Brian Rinaldi (@remotesynth) &lt;a href=&quot;https://twitter.com/remotesynth/status/644542401911083008&quot;&gt;September 17, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Wed, 23 Sep 2015 00:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/09/23/which-free-code-editor-is-right-for-you/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/09/23/which-free-code-editor-is-right-for-you/</guid>
      </item>
    
      <item>
        <title>Picking the Right Speakers for Conferences</title>
        <description>&lt;p&gt;I have been involved in events for some years, ever since running Flex Camp Boston back in 2007 and as recently as handling many aspects of the planning, in particular the speaker lineup, for this year’s TelerikNEXT event. I’ve also served on conference committees for events like QCon New York and Fluent. In my personal experience, the hardest part of running events are getting the word out and choosing the right speakers. Arguably, choosing the right speakers can heavily impact your ability to get the word out - after all, your content is the biggest selling point of your event.&lt;/p&gt;

&lt;p&gt;Yesterday, &lt;a href=&quot;http://lea.verou.me/2015/08/on-the-blindness-of-blind-reviews/&quot;&gt;Lea Verou posted&lt;/a&gt; an opinion piece saying that blind reviews for technical conferences is a broken model. You should read the &lt;a href=&quot;http://lea.verou.me/2015/08/on-the-blindness-of-blind-reviews/&quot;&gt;full post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary, she believes that while the goal is to reduce bias and allow unknown speakers an opportunity, it ends up leading towards choosing “safe” topics. This is because the fear is that the more advanced or atypical topics, in the hands of the wrong speaker, could totally bomb (I’m paraphrasing - these are my words not hers).&lt;/p&gt;

&lt;p&gt;I agree with her, and while I laud the goals of making the speaker selection more egalitarian, there is simply not enough information in a typical abstract to know how successful a presentation will be as the text doesn’t indicate the speaker’s ability to communicate effectively in the format of a session (and requiring a prior session recording already starts making the process less open to fresh faces).&lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href=&quot;http://lea.verou.me/2015/08/on-the-blindness-of-blind-reviews/#comment-2191109856&quot;&gt;response&lt;/a&gt; I added to her post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I totally agree with this. When I ran a conference for 5 years, I was of the mind that who gave the talk was generally more important than what they were talking about. There are people whose talks I want to see regardless of what the topic is - they are engaging, thought provoking and I always come away learning something. Other people could pick the best topic and even have the best slide deck and bomb.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I chose to have invite-only speakers list. That being said, I always set aside a certain amount of slots for speakers I’d never seen or who were new. The trouble with invite only events is the tendency to invite from within the same group every time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;To me the best option is to have a committee that you trust and who represent a diverse set of experiences, backgrounds and views. Have this committee be conscious of efforts to be inclusive and make sure there is room for some fresh faces (even acknowledging that some of these will inevitably bomb).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As you say, each method has its flaws and potential for bias, but even the blind review (as you point out) has bias, just of a different kind.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 14 Aug 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/08/14/picking-the-right-speakers/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/08/14/picking-the-right-speakers/</guid>
      </item>
    
      <item>
        <title>Is the Web Really in Trouble?</title>
        <description>&lt;p&gt;This morning I published a post on the &lt;a href=&quot;http://developer.telerik.com&quot;&gt;Telerik Developer Network&lt;/a&gt; that asks the question “&lt;a href=&quot;http://developer.telerik.com/featured/whats-wrong-with-the-web/&quot;&gt;What’s Wrong with the Web?&lt;/a&gt;”? If you read about web development at all (and apparently you do, since you are reading this), you can’t possibly have missed the long list of posts declaring that the web, as we know it, is in serious jeopardy. The main issues are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The web is losing the battle to native&lt;/li&gt;
  &lt;li&gt;The web is too slow, largely due to the weight of advertising&lt;/li&gt;
  &lt;li&gt;The web is too slow, largely due to the cruft of too many libraries and frameworks&lt;/li&gt;
  &lt;li&gt;The web is trying to be something it isn’t (i.e. native) and adding too many unecessary features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There may be more, but these are the core debates.&lt;/p&gt;

&lt;p&gt;The thing about all these debates is they are very technical - they are about &lt;em&gt;how&lt;/em&gt; we build web apps or the underlying technology of the web. None of these debates seems concerned with &lt;em&gt;what&lt;/em&gt; we are building. As I argue in the conclusion of my &lt;a href=&quot;http://developer.telerik.com/featured/whats-wrong-with-the-web/&quot;&gt;post&lt;/a&gt;, perhaps we’re worried about the wrong thing. Perhaps if we focused on building awesome and creative things on the web again, the answer to these problems would work itself out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I worry that web developers have become like bureaucrats, too worried the procedure of building web apps, having lost sight of the point of building them in the first place.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’d love to hear your thoughts. Please comment on the &lt;a href=&quot;http://developer.telerik.com/featured/whats-wrong-with-the-web/&quot;&gt;post on the Telerik Developer Network&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Aug 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/08/02/is-the-web-in-trouble/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/08/02/is-the-web-in-trouble/</guid>
      </item>
    
      <item>
        <title>The Web is Boring</title>
        <description>&lt;p&gt;When I was growing up, flying was fun. This wasn’t the kind of fun that a kid finds in simply new experiences - it was a legitimately enjoyable experience. The airport was a much less stressful place than it is today, with far less security and fewer lines. The planes seemed more spacious (though perhaps that part was really just that I was a kid). They served you food on most flights - with a real, metal fork and knife. Perhaps it wasn’t the greatest food, but wouldn’t we just love to get something, anything, nowadays? They’d even let kids go into the cabin and meet the crew, often handing them a junior crew member pin to wear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/twa_pin.jpg&quot; alt=&quot;twa pin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I fly more nowadays than I did back then, but flying is generally painful. The airport is stressful. The airline customer service is generally awful. There are few, if any, meals or snacks served. Flying has become something I need - for work, to visit family, to get to somewhere for vacation - not something I enjoy. Even on vacation, flying is something we power through to get where we want to be rather than being part of the vacation experience.&lt;/p&gt;

&lt;h2 id=&quot;the-web-too-has-lost-its-luster&quot;&gt;The Web, Too, Has Lost Its Luster&lt;/h2&gt;

&lt;p&gt;Much like the joy of flying, I am finally ready to openly admit that the web is no longer fun. Just like flying, I use it more today than I ever did back when it was fun, but it is purely out of necessity rather than desire. On a personal level, I use web sites to get news and to keep up with friends and family. The web is, obviously, an integral part of my work too, for news and information as well as the focus of my actual job. All of these things I need, but none of them bring the joy and exitement that the web used to bring.&lt;/p&gt;

&lt;p&gt;Perhaps you are not old enough to remember when the web was fun. If so, you may even think that it &lt;em&gt;is&lt;/em&gt; fun. But back in the mid-to-late-90s, the web had the power to amaze us. New sites and new businesses would launch regularly and everyone had to try them out because each one seemed to bring something new and creative to the table. Sure, many didn’t survive long (and we had tons of useless accounts), but they all seemed to be part of an inexorable path towards something special - a future where the web would make our lives more enjoyable, easier and, yes, more fun. Many of us firmly believed that the web was the future of computing - who’d need a desktop or operating system when the web was eventually going to replace the need for either.&lt;/p&gt;

&lt;h2 id=&quot;that-didnt-happen&quot;&gt;That Didn’t Happen&lt;/h2&gt;

&lt;p&gt;Let’s be honest. None of that ever happened. You may be thinking, “But what about my streaming movies or my streaming music or my multiplayer games? Aren’t those fun?” To which I’d say, “Don’t confuse the internet with the web.” The internet enables each of these, but they are rarely done via the web (yes, they all have web interfaces, but I’d bet the majority of people do not access them this way).&lt;/p&gt;

&lt;p&gt;There’s been a lot of talk about how the &lt;a href=&quot;http://www.quirksmode.org/blog/archives/2015/05/web_vs_native_l.html&quot;&gt;web is losing&lt;/a&gt; some unofficial battle for survival. Much of that has focused on the overwhelming amount of tools for web development and the way these tools are impacting the performance of the web. I am not disagreeing with those, per se, but I can say that the web was actually much more fun back when it was also horribly slow (most of us were on dial-up after all).&lt;/p&gt;

&lt;p&gt;I feel that the thing holding the web back is a lack of real, creative innovation. I read every day about new little features of the web platform, but I can’t remember the last time I read about something built on the web that really excited me. Until then, I’ll keep passionlessly reading my news and blog posts or getting my gmail and hating myself for checking Facebook for lack of something more interesting to do. Sorry, web, but you bore me.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jun 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/06/24/the-web-is-boring/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/06/24/the-web-is-boring/</guid>
      </item>
    
      <item>
        <title>Tips for Writing for a Tech Audience</title>
        <description>&lt;p&gt;I’ve been writing articles and blog posts about web development and technology for a long time. The original version of this blog started in 2004, but by that time I’d already written a couple articles for the ultra-prestigious ColdFusion Developer’s Journal (it’s ok to feel jealous).&lt;/p&gt;

&lt;p&gt;However, I’ve also been editing articles and blog posts about web development and technology for a while too. It started when I was at Adobe helping to run the Adobe Developer Connection a few years ago and continued when I launched my own site (Flippin’ Awesome which is now Modern Web and not run by me anymore). I still do this on an almost daily basis running the &lt;a href=&quot;developer.telerik.com&quot;&gt;Telerik Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this experience has taught me some things that I think help to make a really good (and potentially really popular) article or blog post for a developer or technology audience. In this post I’ll share my recommendations, though I should note that I’m not an expert at always following my own guidelines all the time.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;have-a-style&quot;&gt;Have a Style&lt;/h2&gt;

&lt;p&gt;It’s important to keep in mind that you aren’t writing API docs. API docs are generally dry, boring and simply stick to the facts. That’s their goal. However, an article or blog post should allow some of your personality to shine through. This helps to make the content both more relatable and more enjoyable to read.&lt;/p&gt;

&lt;p&gt;Keep in mind that your goal is both to educate and to entertain, to some degree. Some developers revert to a litany of code and explanation. It’s better to have a voice and have a story.&lt;/p&gt;

&lt;p&gt;Some things that can help:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain &lt;em&gt;why&lt;/em&gt; you are trying to do something, not just what you are trying to do and how you are doing it.&lt;/li&gt;
  &lt;li&gt;What made you get interested in doing this?&lt;/li&gt;
  &lt;li&gt;Did you have a struggles along the way? There’s no shame in admitting that you found something difficult - your readers will likely relate to the experience.&lt;/li&gt;
  &lt;li&gt;Have fun with the demo! Perhaps pick something you are interested in that isn’t technical. For example. I often choose to use some cartoons I enjoy as subject matter for my demos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;know-your-audience&quot;&gt;Know Your Audience&lt;/h2&gt;

&lt;p&gt;While you should have a voice and a style, it’s important to know when it’s ok to be more or less casual in your voice. If I am writing something for my blog, I am often much more casual than if I am writing for the Telerik Developer Network or Sitepoint.&lt;/p&gt;

&lt;p&gt;If I am writing for my blog, proper grammar, punctuation and spelling are less important. If I am writing for a professional site, these become the difference between seeming like an amateur and not. You’d be surprised how people are affected by these things, even if they do not recognize it themselves. Some sites have editors who help with this, but others don’t - so don’t rely on them to correct your mistakes.&lt;/p&gt;

&lt;p&gt;Try to always have a friend you trust read through the article first - this isn’t critical for a personal blog post but even those can benefit. Even the best writers need a second opinion and there is nothing than can make your content better than a good, critical opinion.&lt;/p&gt;

&lt;h2 id=&quot;stay-on-track&quot;&gt;Stay on Track&lt;/h2&gt;

&lt;p&gt;So many developers tend to think that every little detail is pertinent. So, they get sidetracked. Instead of traveling straight down a path, they don’t just point out the detours, but take you down them.&lt;/p&gt;

&lt;p&gt;As a rule, if the information doesn’t apply to &lt;em&gt;most&lt;/em&gt; situations, don’t spend time on it. These are the kind of scenarios like, if you are running an old version of X operating system and want to perform special action Y, you’ll need to do this a different way - let’s walk through it. Another example is getting lost in caveats, detailing every minor exception that in all likelihood doesn’t apply to the reader.&lt;/p&gt;

&lt;p&gt;The best strategy in these cases is to simply point to the “detour” as an aside and link to the best resource to follow. Or note that there are exceptions but don’t go detailed into the full list of caveats.&lt;/p&gt;

&lt;p&gt;You may feel as though you are being somehow incomplete in your coverage, but you are less likely to lose the 90% of the readers to whom the straightforward path applies by not catering your post to the 10%.&lt;/p&gt;

&lt;h2 id=&quot;avoid-the-wall-of-text&quot;&gt;Avoid the Wall of Text&lt;/h2&gt;

&lt;p&gt;There is nothing harder to read than a post that has no headers and is filled with overly long paragraphs. Adding section headers and even subheaders for long sections not only makes your article easier to read, but also makes it easier to scan - which can help the reader determine it’s value to them.&lt;/p&gt;

&lt;p&gt;Shorter paragraphs also make your content more readable and scannable. Plus, a wall of unbroken text can seem intimidating to a reader. Break up large paragraphs and, whenever possible, place key ideas into lists, which I’ve found can help drive home key points and improve retention.&lt;/p&gt;

&lt;h2 id=&quot;what-are-your-ideas&quot;&gt;What Are Your Ideas?&lt;/h2&gt;

&lt;p&gt;Hopefully you’ve found these ideas helpful. Do you have any strategies you use to improve your writing? Please share.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 May 2015 05:00:00 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/05/18/writing-for-tech-audience/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/05/18/writing-for-tech-audience/</guid>
      </item>
    
      <item>
        <title>Why are Web Developers Hostile to Audio?</title>
        <description>&lt;p&gt;I like to talk and write about Web Audio. It can be a fun topic. However, most talks and demos fail to touch on anything useful. Sure, we can build drum machines and sequencers to our heart’s content, but how does this apply to 90% of the web? It doesn’t. Thus, when I speak or write about web audio it seems to draw a niche audience.&lt;/p&gt;

&lt;p&gt;However, recently I have been on a mission to talk and write about how web developers can use &lt;a href=&quot;http://developer.telerik.com/featured/practical-web-audio/&quot;&gt;web audio to enhance their applications in practical and useful ways&lt;/a&gt;. The frequent response I get is like the one below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/webaudio_comment.jpg&quot; alt=&quot;I hate audio on the web&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You gotta love social media because not only did this person make it clear he never bothered to read the article, but 5 people (which on Google Plus is like everyone) gave it a plus one. However, leaving aside those issues, why are web developers so outright hostile and dismissive to even the suggestion of using audio on the web that they aren’t even willing to discuss it or hear arguments as to how it could be useful?&lt;/p&gt;

&lt;p&gt;Let’s recap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Audio in game UI equals totally expected;&lt;/li&gt;
  &lt;li&gt;Audio in mobile app UI equals acceptable;&lt;/li&gt;
  &lt;li&gt;Audio in desktop app UI equals legitimate, within reason;&lt;/li&gt;
  &lt;li&gt;Audio in web apps equals ARE YOU INSANE?!?!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a theory as to why.&lt;/p&gt;

&lt;h3 id=&quot;the-legacy-of-years-of-misuse&quot;&gt;The Legacy of Years of Misuse&lt;/h3&gt;

&lt;p&gt;I expressed this In the early days of the web, we didn’t have the web audio API. What we had was site’s that got clever and used MIDI or, even worse, had some obnoxious “Hamster Dance” like audio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hampster_dance.gif&quot; alt=&quot;Hamster Dance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then came years of Flash Intros and more useless audio. It became ingrained in web developers’ heads that audio on the web was purely a gimmick. It is such a widely accepted “faux pas” to include audio, that even the mention of carefully considering audio brings strong reactions.&lt;/p&gt;

&lt;h3 id=&quot;its-time-to-let-it-go&quot;&gt;It’s Time to Let It Go&lt;/h3&gt;

&lt;p&gt;But do we have to be held back today by the misdeeds of years ago? Sure, the web audio API can be misused. Sure, so far, we’ve mostly shown how it can be used for things like &lt;a href=&quot;http://modernweb.com/2013/09/09/retro-game-music-using-web-audio-and-band-js/&quot;&gt;8 bit video game music&lt;/a&gt; (guilty as charged) and web-based drum machines. (Not that those things are useful, even purely as excercises in having some fun with your programming skills, they are beneficial.) The point is, though, this doesn’t negate there being useful and practical ways to integrate audio into your web application. If it’s ok for every other type of application, why not the web?&lt;/p&gt;

&lt;p&gt;Unlike the commenter above, perhaps you’ll give my &lt;a href=&quot;http://developer.telerik.com/featured/practical-web-audio/&quot;&gt;full article a read&lt;/a&gt;. I’d love to hear your thoughts on the topic.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 May 2015 07:15:47 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/05/14/web-developers-hostile-to-audio/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/05/14/web-developers-hostile-to-audio/</guid>
      </item>
    
      <item>
        <title>Jekyll Versus the Competition</title>
        <description>&lt;p&gt;On Saturday, May 2, the first ever &lt;a href=&quot;http://jekyllconf.com&quot;&gt;JekyllConf&lt;/a&gt; was held online and featured some really prominent speakers including Tom Preston-Werner and Brandon Mathis. I had the honor of opening the event with my session comparing Jekyll to other popular static site engine options including &lt;a href=&quot;http://harpjs.com&quot;&gt;Harp&lt;/a&gt;, &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt;, &lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt;, &lt;a href=&quot;http://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; and &lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In summary (and in my personal opinion of course), Jekyll is still in the strongest position of all the engines. It has the strongest community (partly evidenced by JekyllConf itself), the best documentation (not saying it couldn’t be better, but it’s better than the alternatives) and has the largest selection of pre-built templates and plugins.&lt;/p&gt;

&lt;p&gt;However, it has failed to reach much beyond hardcore developers. This is partly because of the nature of the tool - for instance, few people outside of the developer community enjoy working on the command line…in fact, most find it intimidating. Tooling for authors is weak too - Markdown is a terrible option for authors (who aren’t developers). We think of it as being so simple and easy, but that’s actually what makes it so complex. In terms of authoring, it covers a majority of use cases, but it is still very common to encounter requirements that it doesn’t meet (intentionally, since it’s goal was simplicity). Thus, when you teach an author Markdown, you need to teach them the syntax, what it doesn’t cover and  HTML to handle those scenarios it doesn’t cover. This is actually more complicated than simply teaching them HTML.&lt;/p&gt;

&lt;p&gt;In my opinion, until the tooling is available to allow authors and contributors to write using the tooling they love, static site engines will remain a niche solution. This is a shame as they actually seem like the optimal solution for content focused sites and, perhaps more so, documentation sites. The good news is that there are people working on the tools needed to bridge this gap…we’ll see how this goes!&lt;/p&gt;

&lt;p&gt;You can see the full session recording below or view the &lt;a href=&quot;https://www.youtube.com/watch?v=X5sJIL-nOhg&amp;amp;feature=youtu.be&amp;amp;t=9m32s&quot;&gt;full recording of the day here&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vT7DhK5zbv0?list=PLrxYIq_0LFJcXlsRZD-JCdITfZexwvqsQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Thu, 07 May 2015 07:15:47 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/05/07/jekyll-versus-competition/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/05/07/jekyll-versus-competition/</guid>
      </item>
    
      <item>
        <title>Tools for Writing and Converting Markdown</title>
        <description>&lt;p&gt;By now, most developers are familiar on some level with &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;. It’s become a somewhat ubiquitous part of developer tooling, probably in no small part due to it’s usage for documentation in GitHub. It also plays a big part in nearly all the major static site engines.&lt;/p&gt;

&lt;p&gt;The power of Markdown and probably a significant reason for its success is in its simplicity. But this is also its biggest weakness. Developers love Markdown because it offers a shorthand for probably 80% of their writing use cases - things like blog posts and basic documentation. For the other 20%, developers have no problem switching to straight HTML, which, of course, you can include in a Markdown file without issue.&lt;/p&gt;

&lt;p&gt;For writers and the general public however, this presents a huge obstacle. They cannot use the tools they are comfortable in writing with and they not only are forced to learn Markdown syntax, but they must learn those cases that Markdown doesn’t cover and the HTML to use in these cases. It’s multiple layers of complexity for the sake of simplicity.&lt;/p&gt;

&lt;p&gt;That being said, as Markdown becomes more widespread in its use, the tooling around it is slowly improving. I use Markdown daily and below are some of the tools that I’ve found useful in my own experience.&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;desktop-editors&quot;&gt;Desktop Editors&lt;/h2&gt;

&lt;p&gt;Most code editors such as &lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt; or &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; already include some level of Markdown support. However, if you’re looking for an editor with richer functionality geared specifically towards Markdown, then there are a number of options.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://25.io/mou/&quot;&gt;Mou&lt;/a&gt; is my current go to option for writing Markdown. As with pretty much every Markdown editor out there, you write in Markdown and have a live preview available. There is currently no option that I am aware of where you write in rich text and have it converted to Markdown.&lt;/p&gt;

&lt;p&gt;Mou offers syntax hinting and highlights as well as keyboard shortcuts, but my favorite feature (and why I prefer it) is the export. I rely heavily on the export to HTML feature and, in my experience, it has the most reliable of the editors I have tried. The only quirk I find is that it often stumbles when using backticks for code blocks (and doesn’t recognize the GitHub-flavored Markdown syntax for indicating the type of code within a code block).&lt;/p&gt;

&lt;p&gt;Currently Mou is still free, though a 1.0 looks to be forthcoming that will be paid.&lt;/p&gt;

&lt;p&gt;Another free option is &lt;a href=&quot;http://macdown.uranusjr.com/&quot;&gt;Macdown&lt;/a&gt;, which was created when Mou appeared to be ceasing development. I found it to be quite buggy, personally, but have not tried it much since its initial release.&lt;/p&gt;

&lt;p&gt;If you are on Windows, some options I’ve heard recommended include &lt;a href=&quot;http://www.texts.io/&quot;&gt;Texts&lt;/a&gt; and &lt;a href=&quot;http://markdownpad.com/&quot;&gt;MarkdownPad&lt;/a&gt;, though I have limited experience with either.&lt;/p&gt;

&lt;p&gt;Lastly, while not technically an editor, &lt;a href=&quot;https://github.com/mobily/markdown-live&quot;&gt;Markdown Live&lt;/a&gt; is a useful tool for live-previewing Markdown as you write it. Once installed, you simply change directory into the folder you want to serve up and enter &lt;code&gt;mdlive&lt;/code&gt; and it will open a preview in the browser that will update as you type - without the need to save the file. This can be useful if you prefer to use a plain text editor for writing Markdown.&lt;/p&gt;

&lt;h2 id=&quot;web-based-editors&quot;&gt;Web-based Editors&lt;/h2&gt;

&lt;p&gt;If you are looking for a free web-based option, &lt;a href=&quot;http://dillinger.io/&quot;&gt;Dillinger&lt;/a&gt; is a free (and open source) Markdown editor for the browser. It includes a live preview as well as the ability to import documents from numerous sources and export them to various formats.&lt;/p&gt;

&lt;p&gt;However, one of the things lacking in both desktop and web-based editors is collaboration. If you are working on a team, the ability to share, comment and collaborate on a document is not just useful, but necessary. &lt;a href=&quot;https://beegit.com/&quot;&gt;Beegit&lt;/a&gt; is a commercial offering that includes a number of collaboration features. My team uses it mostly for the ability to share and comment on documents as they are being developed, much as you would within Google Drive.&lt;/p&gt;

&lt;h2 id=&quot;converters&quot;&gt;Converters&lt;/h2&gt;

&lt;p&gt;When you are working with a number of contributors, it’s not always possible to force everyone to use Markdown. While Markdown’s simplicity makes it simple to manually convert short documents, converting long documents or groups of documents could get tedious and time consuming. While they aren’t perfect, in these cases, a converter can be enormously helpful.&lt;/p&gt;

&lt;p&gt;One converter that I rely on frequently is the &lt;a href=&quot;http://word-to-markdown.herokuapp.com/&quot;&gt;Word to Markdown web app&lt;/a&gt;. Simply choose your local file and hit convert. The site will post you the Markdown it generates from the file as well as a live preview. For good or for bad, it even embeds images in the document using Base64 encoding. Personally, I find this can be difficult to clean up and replace with external images, so I often remove them from the source document first and put placeholders.&lt;/p&gt;

&lt;p&gt;Word to Markdown is also available as an &lt;a href=&quot;https://github.com/benbalter/word-to-markdown&quot;&gt;open source project and command line tool&lt;/a&gt;. In my experience, I couldn’t get the command line tool to work properly for some reason, while the web app worked perfectly.&lt;/p&gt;

&lt;p&gt;In other cases, you may encounter rich text that you need converted to Markdown, such as text copy/pasted from the web or some other editor. In these situations, I’ve found &lt;a href=&quot;http://markitdown.medusis.com/&quot;&gt;Mark It Down&lt;/a&gt; to be both reliable and helpful (it is also &lt;a href=&quot;https://github.com/bambax/markitdown.medusis.com&quot;&gt;open source&lt;/a&gt;). Simply paste in the rich text and hit the convert button to get back nice, clean Markdown.&lt;/p&gt;

&lt;h2 id=&quot;other-tools&quot;&gt;Other Tools?&lt;/h2&gt;

&lt;p&gt;This is by no means a comprehensive list of Markdown tools - just the ones that I’ve personally come to rely on at some level or another. Are there any others that you recommend? Be sure to share in the comments as I’m always looking for new ones.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Apr 2015 07:15:47 -0400</pubDate>
        <link>http://remotesynthesis.com/general/2015/04/29/tools-for-writing-markdown/</link>
        <guid isPermaLink="true">http://remotesynthesis.com/general/2015/04/29/tools-for-writing-markdown/</guid>
      </item>
    
  </channel>
</rss>
